<?xml version="1.0" encoding="UTF-8"?>
<framework xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="schemas/frameworkDescriptionVersion1.1.4.xsd" frameworkId="com.symfony" name="Symfony_18/01/18 10:11 AM_s" invoke="C:\xampp\php\php.exe C:\PhpstormProjects\jobeet\lib\vendor\symfony\data\bin\symfony" alias="s" enabled="true" version="2">
  <extraData><![CDATA[version:1.1-2]]></extraData>
  <command>
    <name>help</name>
    <help><![CDATA[Usage:<br/> symfony help [--xml] [task_name]<br/><br/>Arguments:<br/> task_name The task name (default: help)<br/><br/>Options:<br/> --xml To output help as XML<br/><br/>Description:<br/> The help task displays help for a given task:<br/> <br/> ./symfony help test:all<br/> <br/> You can also output the help as XML by using the --xml option:<br/> <br/> ./symfony help test:all --xml<br/>]]></help>
    <params>task_name[=null]</params>
  </command>
  <command>
    <name>list</name>
    <help><![CDATA[Usage:<br/> symfony list [--xml] [namespace]<br/><br/>Arguments:<br/> namespace The namespace name<br/><br/>Options:<br/> --xml To output help as XML<br/><br/>Description:<br/> The list task lists all tasks:<br/> <br/> ./symfony list<br/> <br/> You can also display the tasks for a specific namespace:<br/> <br/> ./symfony list test<br/> <br/> You can also output the information as XML by using the --xml option:<br/> <br/> ./symfony list --xml<br/>]]></help>
    <params>namespace[=null]</params>
  </command>
  <command>
    <name>app:routes</name>
    <help><![CDATA[Usage:<br/> symfony app:routes application [name]<br/><br/>Arguments:<br/> application The application name<br/> name A route name<br/><br/>Description:<br/> The app:routes displays the current routes for a given application:<br/> <br/> ./symfony app:routes frontend<br/>]]></help>
    <params>application name[=null]</params>
  </command>
  <command>
    <name>cache:clear</name>
    <help><![CDATA[Usage:<br/> symfony cache:clear [--app[="..."]] [--env[="..."]] [--type[="..."]] <br/><br/>Aliases: cc<br/><br/>Options:<br/> --app The application name<br/> --env The environment<br/> --type The type (default: all)<br/><br/>Description:<br/> The cache:clear task clears the symfony cache.<br/> <br/> By default, it removes the cache for all available types, all applications,<br/> and all environments.<br/> <br/> You can restrict by type, application, or environment:<br/> <br/> For example, to clear the frontend application cache:<br/> <br/> ./symfony cache:clear --app=frontend<br/> <br/> To clear the cache for the prod environment for the frontend application:<br/> <br/> ./symfony cache:clear --app=frontend --env=prod<br/> <br/> To clear the cache for all prod environments:<br/> <br/> ./symfony cache:clear --env=prod<br/> <br/> To clear the config cache for all prod environments:<br/> <br/> ./symfony cache:clear --type=config --env=prod<br/> <br/> The built-in types are: config, i18n, routing, module<br/> and template.<br/> <br/>]]></help>
  </command>
  <command>
    <name>cc</name>
    <help><![CDATA[Usage:<br/> symfony cache:clear [--app[="..."]] [--env[="..."]] [--type[="..."]] <br/><br/>Aliases: cc<br/><br/>Options:<br/> --app The application name<br/> --env The environment<br/> --type The type (default: all)<br/><br/>Description:<br/> The cache:clear task clears the symfony cache.<br/> <br/> By default, it removes the cache for all available types, all applications,<br/> and all environments.<br/> <br/> You can restrict by type, application, or environment:<br/> <br/> For example, to clear the frontend application cache:<br/> <br/> ./symfony cache:clear --app=frontend<br/> <br/> To clear the cache for the prod environment for the frontend application:<br/> <br/> ./symfony cache:clear --app=frontend --env=prod<br/> <br/> To clear the cache for all prod environments:<br/> <br/> ./symfony cache:clear --env=prod<br/> <br/> To clear the config cache for all prod environments:<br/> <br/> ./symfony cache:clear --type=config --env=prod<br/> <br/> The built-in types are: config, i18n, routing, module<br/> and template.<br/> <br/>]]></help>
  </command>
  <command>
    <name>configure:author</name>
    <help><![CDATA[Usage:<br/> symfony configure:author author<br/><br/>Arguments:<br/> author The project author<br/><br/>Description:<br/> The configure:author task configures the author for a project:<br/> <br/> ./symfony configure:author "Fabien Potencier <fabien.potencier@symfony-project.com>"<br/> <br/> The author is used by the generates to pre-configure the PHPDoc header for each generated file.<br/> <br/> The value is stored in [config/properties.ini].<br/>]]></help>
    <params>author</params>
  </command>
  <command>
    <name>configure:database</name>
    <help><![CDATA[Usage:<br/> symfony configure:database [--env[="..."]] [--name[="..."]] [--class[="..."]] [--app[="..."]] dsn [username] [password]<br/><br/>Arguments:<br/> dsn The database dsn<br/> username The database username (default: root)<br/> password The database password<br/><br/>Options:<br/> --env The environment (default: all)<br/> --name The connection name (default: doctrine)<br/> --class The database class name (default: sfDoctrineDatabase)<br/> --app The application name<br/><br/>Description:<br/> The configure:database task configures the database DSN<br/> for a project:<br/> <br/> ./symfony configure:database mysql:host=localhost;dbname=example root mYsEcret<br/> <br/> By default, the task change the configuration for all environment. If you want<br/> to change the dsn for a specific environment, use the env option:<br/> <br/> ./symfony configure:database --env=dev mysql:host=localhost;dbname=example_dev root mYsEcret<br/> <br/> To change the configuration for a specific application, use the app option:<br/> <br/> ./symfony configure:database --app=frontend mysql:host=localhost;dbname=example root mYsEcret<br/> <br/> You can also specify the connection name and the database class name:<br/> <br/> ./symfony configure:database --name=main --class=ProjectDatabase mysql:host=localhost;dbname=example root mYsEcret<br/>]]></help>
    <params>dsn username[=null] password[=null]</params>
  </command>
  <command>
    <name>doctrine:build</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build [--application[="..."]] [--env="..."] [--no-confirmation] [--all] [--all-classes] [--model] [--forms] [--filters] [--sql] [--db] [--and-migrate] [--and-load[="..."]] [--and-append[="..."]] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --no-confirmation Whether to force dropping of the database<br/> --all Build everything and reset the database<br/> --all-classes Build all classes<br/> --model Build model classes<br/> --forms Build form classes<br/> --filters Build filter classes<br/> --sql Build SQL<br/> --db Drop, create, and either insert SQL or migrate the database<br/> --and-migrate Migrate the database<br/> --and-load Load fixture data (multiple values allowed)<br/> --and-append Append fixture data (multiple values allowed)<br/><br/>Description:<br/> The doctrine:build task generates code based on your schema:<br/> <br/> ./symfony doctrine:build<br/> <br/> You must specify what you would like built. For instance, if you want model<br/> and form classes built use the --model and --forms options:<br/> <br/> ./symfony doctrine:build --model --forms<br/> <br/> You can use the --all shortcut option if you would like all classes and<br/> SQL files generated and the database rebuilt:<br/> <br/> ./symfony doctrine:build --all<br/> <br/> This is equivalent to running the following tasks:<br/> <br/> ./symfony doctrine:drop-db<br/> ./symfony doctrine:build-db<br/> ./symfony doctrine:build-model<br/> ./symfony doctrine:build-forms<br/> ./symfony doctrine:build-filters<br/> ./symfony doctrine:build-sql<br/> ./symfony doctrine:insert-sql<br/> <br/> You can also generate only class files by using the --all-classes shortcut<br/> option. When this option is used alone, the database will not be modified.<br/> <br/> ./symfony doctrine:build --all-classes<br/> <br/> The --and-migrate option will run any pending migrations once the builds<br/> are complete:<br/> <br/> ./symfony doctrine:build --db --and-migrate<br/> <br/> The --and-load option will load data from the project and plugin<br/> data/fixtures/ directories:<br/> <br/> ./symfony doctrine:build --db --and-migrate --and-load<br/> <br/> To specify what fixtures are loaded, add a parameter to the --and-load option:<br/> <br/> ./symfony doctrine:build --all --and-load="data/fixtures/dev/"<br/> <br/> To append fixture data without erasing any records from the database, include<br/> the --and-append option:<br/> <br/> ./symfony doctrine:build --all --and-append<br/>]]></help>
  </command>
  <command>
    <name>doctrine:build-db</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-db [--application[="..."]] [--env="..."] [database1] ... [databaseN]<br/><br/>Aliases: doctrine:create-db<br/><br/>Arguments:<br/> database A specific database<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:build-db task creates one or more databases based on<br/> configuration in config/databases.yml:<br/> <br/> ./symfony doctrine:build-db<br/> <br/> You can specify what databases to create by providing their names:<br/> <br/> ./symfony doctrine:build-db slave1 slave2<br/>]]></help>
    <params>database</params>
  </command>
  <command>
    <name>doctrine:create-db</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-db [--application[="..."]] [--env="..."] [database1] ... [databaseN]<br/><br/>Aliases: doctrine:create-db<br/><br/>Arguments:<br/> database A specific database<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:build-db task creates one or more databases based on<br/> configuration in config/databases.yml:<br/> <br/> ./symfony doctrine:build-db<br/> <br/> You can specify what databases to create by providing their names:<br/> <br/> ./symfony doctrine:build-db slave1 slave2<br/>]]></help>
    <params>database</params>
  </command>
  <command>
    <name>doctrine:build-filters</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-filters [--application[="..."]] [--env="..."] [--model-dir-name="..."] [--filter-dir-name="..."] [--generator-class="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --model-dir-name The model dir name (default: model)<br/> --filter-dir-name The filter form dir name (default: filter)<br/> --generator-class The generator class (default: sfDoctrineFormFilterGenerator)<br/><br/>Description:<br/> The doctrine:build-filters task creates form filter classes from the schema:<br/> <br/> ./symfony doctrine:build-filters<br/> <br/> This task creates form filter classes based on the model. The classes are<br/> created in lib/doctrine/filter.<br/> <br/> This task never overrides custom classes in lib/doctrine/filter.<br/> It only replaces base classes generated in lib/doctrine/filter/base.<br/>]]></help>
  </command>
  <command>
    <name>doctrine:build-forms</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-forms [--application[="..."]] [--env="..."] [--model-dir-name="..."] [--form-dir-name="..."] [--generator-class="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --model-dir-name The model dir name (default: model)<br/> --form-dir-name The form dir name (default: form)<br/> --generator-class The generator class (default: sfDoctrineFormGenerator)<br/><br/>Description:<br/> The doctrine:build-forms task creates form classes from the schema:<br/> <br/> ./symfony doctrine:build-forms<br/> <br/> This task creates form classes based on the model. The classes are created<br/> in lib/doctrine/form.<br/> <br/> This task never overrides custom classes in lib/doctrine/form.<br/> It only replaces base classes generated in lib/doctrine/form/base.<br/>]]></help>
  </command>
  <command>
    <name>doctrine:build-model</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-model [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:build-model task creates model classes from the schema:<br/> <br/> ./symfony doctrine:build-model<br/> <br/> The task read the schema information in config/doctrine/*.yml<br/> from the project and all enabled plugins.<br/> <br/> The model classes files are created in lib/model/doctrine.<br/> <br/> This task never overrides custom classes in lib/model/doctrine.<br/> It only replaces files in lib/model/doctrine/base.<br/>]]></help>
  </command>
  <command>
    <name>doctrine:build-schema</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-schema [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:build-schema task introspects a database to create a schema:<br/> <br/> ./symfony doctrine:build-schema<br/> <br/> The task creates a yml file in config/doctrine<br/>]]></help>
  </command>
  <command>
    <name>doctrine:build-sql</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:build-sql [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:build-sql task creates SQL statements for table creation:<br/> <br/> ./symfony doctrine:build-sql<br/> <br/> The generated SQL is optimized for the database configured in config/databases.yml:<br/> <br/> doctrine.database = mysql<br/>]]></help>
  </command>
  <command>
    <name>doctrine:clean-model-files</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:clean-model-files [--no-confirmation] <br/><br/>Aliases: doctrine:clean<br/><br/>Options:<br/> --no-confirmation Do not ask for confirmation<br/><br/>Description:<br/> The doctrine:clean-model-files task deletes model classes that are not<br/> represented in project or plugin schema.yml files:<br/> <br/> ./symfony doctrine:clean-model-files<br/>]]></help>
  </command>
  <command>
    <name>doctrine:clean</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:clean-model-files [--no-confirmation] <br/><br/>Aliases: doctrine:clean<br/><br/>Options:<br/> --no-confirmation Do not ask for confirmation<br/><br/>Description:<br/> The doctrine:clean-model-files task deletes model classes that are not<br/> represented in project or plugin schema.yml files:<br/> <br/> ./symfony doctrine:clean-model-files<br/>]]></help>
  </command>
  <command>
    <name>doctrine:create-model-tables</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:create-model-tables [--application[="..."]] [--env="..."] [models1] ... [modelsN]<br/><br/>Arguments:<br/> models The list of models<br/><br/>Options:<br/> --application The application name (default: frontend)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:create-model-tables Drop and recreate tables for specified models:<br/> <br/> ./symfony doctrine:create-model-tables User<br/>]]></help>
    <params>models</params>
  </command>
  <command>
    <name>doctrine:data-dump</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:data-dump [--application[="..."]] [--env="..."] [target]<br/><br/>Arguments:<br/> target The target filename<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:data-dump task dumps database data:<br/> <br/> ./symfony doctrine:data-dump<br/> <br/> The task dumps the database data in data/fixtures/%target%.<br/> <br/> The dump file is in the YML format and can be reimported by using<br/> the doctrine:data-load task.<br/> <br/> ./symfony doctrine:data-load<br/>]]></help>
    <params>target[=null]</params>
  </command>
  <command>
    <name>doctrine:data-load</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:data-load [--application[="..."]] [--env="..."] [--append] [dir_or_file1] ... [dir_or_fileN]<br/><br/>Arguments:<br/> dir_or_file Directory or file to load<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --append Don't delete current data in the database<br/><br/>Description:<br/> The doctrine:data-load task loads data fixtures into the database:<br/> <br/> ./symfony doctrine:data-load<br/> <br/> The task loads data from all the files found in data/fixtures/.<br/> <br/> If you want to load data from specific files or directories, you can append<br/> them as arguments:<br/> <br/> ./symfony doctrine:data-load data/fixtures/dev data/fixtures/users.yml<br/> <br/> If you don't want the task to remove existing data in the database,<br/> use the --append option:<br/> <br/> ./symfony doctrine:data-load --append<br/>]]></help>
    <params>dir_or_file</params>
  </command>
  <command>
    <name>doctrine:delete-model-files</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:delete-model-files [--no-confirmation] [--prefix="..."] [--suffix="..."] [--extension="..."] name1 ... [nameN]<br/><br/>Arguments:<br/> name The name of the model you wish to delete all related files for.<br/><br/>Options:<br/> --no-confirmation Do not ask for confirmation<br/> --prefix Class prefix to remove (multiple values allowed)<br/> --suffix Class suffix to remove (multiple values allowed)<br/> --extension Filename extension to remove (multiple values allowed)<br/><br/>Description:<br/> The doctrine:delete-model-files task deletes all files associated with certain<br/> models:<br/> <br/> ./symfony doctrine:delete-model-files Article Author<br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>doctrine:dql</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:dql [--application[="..."]] [--env="..."] [--show-sql] [--table] dql_query [parameter1] ... [parameterN]<br/><br/>Arguments:<br/> dql_query The DQL query to execute<br/> parameter Query parameter<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --show-sql Show the sql that would be executed<br/> --table Return results in table format<br/><br/>Description:<br/> The doctrine:dql task executes a DQL query and displays the formatted<br/> results:<br/> <br/> ./symfony doctrine:dql "FROM User"<br/> <br/> You can show the SQL that would be executed by using the --show-sql option:<br/> <br/> ./symfony doctrine:dql --show-sql "FROM User"<br/> <br/> Provide query parameters as additional arguments:<br/> <br/> ./symfony doctrine:dql "FROM User WHERE email LIKE ?" "%symfony-project.com"<br/>]]></help>
    <params>dql_query parameter</params>
  </command>
  <command>
    <name>doctrine:drop-db</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:drop-db [--application[="..."]] [--env="..."] [--no-confirmation] [database1] ... [databaseN]<br/><br/>Arguments:<br/> database A specific database<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --no-confirmation Whether to force dropping of the database<br/><br/>Description:<br/> The doctrine:drop-db task drops one or more databases based on<br/> configuration in config/databases.yml:<br/> <br/> ./symfony doctrine:drop-db<br/> <br/> You will be prompted for confirmation before any databases are dropped unless<br/> you provide the --no-confirmation option:<br/> <br/> ./symfony doctrine:drop-db --no-confirmation<br/> <br/> You can specify what databases to drop by providing their names:<br/> <br/> ./symfony doctrine:drop-db slave1 slave2<br/>]]></help>
    <params>database</params>
  </command>
  <command>
    <name>doctrine:generate-admin</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-admin [--module="..."] [--theme="..."] [--singular="..."] [--plural="..."] [--env="..."] [--actions-base-class="..."] application route_or_model<br/><br/>Arguments:<br/> application The application name<br/> route_or_model The route name or the model class<br/><br/>Options:<br/> --module The module name<br/> --theme The theme name (default: admin)<br/> --singular The singular name<br/> --plural The plural name<br/> --env The environment (default: dev)<br/> --actions-base-class The base class for the actions (default: sfActions)<br/><br/>Description:<br/> The doctrine:generate-admin task generates a Doctrine admin module:<br/> <br/> ./symfony doctrine:generate-admin frontend Article<br/> <br/> The task creates a module in the %frontend% application for the<br/> %Article% model.<br/> <br/> The task creates a route for you in the application routing.yml.<br/> <br/> You can also generate a Doctrine admin module by passing a route name:<br/> <br/> ./symfony doctrine:generate-admin frontend article<br/> <br/> The task creates a module in the %frontend% application for the<br/> %article% route definition found in routing.yml.<br/> <br/> For the filters and batch actions to work properly, you need to add<br/> the with_wildcard_routes option to the route:<br/> <br/> article:<br/> class: sfDoctrineRouteCollection<br/> options:<br/> model: Article<br/> with_wildcard_routes: true<br/>]]></help>
    <params>application route_or_model</params>
  </command>
  <command>
    <name>doctrine:generate-migration</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-migration [--application[="..."]] [--env="..."] [--editor-cmd="..."] name<br/><br/>Arguments:<br/> name The name of the migration<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --editor-cmd Open script with this command upon creation<br/><br/>Description:<br/> The doctrine:generate-migration task generates migration template<br/> <br/> ./symfony doctrine:generate-migration AddUserEmailColumn<br/> <br/> You can provide an --editor-cmd option to open the new migration class in your<br/> editor of choice upon creation:<br/> <br/> ./symfony doctrine:generate-migration AddUserEmailColumn --editor-cmd=mate<br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>doctrine:generate-migrations-db</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-migrations-db [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:generate-migrations-db task generates migration classes from<br/> existing database connections:<br/> <br/> ./symfony doctrine:generate-migrations-db<br/>]]></help>
  </command>
  <command>
    <name>doctrine:generate-migrations-diff</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-migrations-diff [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:generate-migrations-diff task generates migration classes by<br/> producing a diff between your old and new schema.<br/> <br/> ./symfony doctrine:generate-migrations-diff<br/>]]></help>
  </command>
  <command>
    <name>doctrine:generate-migrations-models</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-migrations-models [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:generate-migrations-models task generates migration classes<br/> from an existing set of models:<br/> <br/> ./symfony doctrine:generate-migrations-models<br/>]]></help>
  </command>
  <command>
    <name>doctrine:generate-module</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-module [--theme="..."] [--generate-in-cache] [--non-verbose-templates] [--with-show] [--singular="..."] [--plural="..."] [--route-prefix="..."] [--with-doctrine-route] [--env="..."] [--actions-base-class="..."] application module model<br/><br/>Arguments:<br/> application The application name<br/> module The module name<br/> model The model class name<br/><br/>Options:<br/> --theme The theme name (default: default)<br/> --generate-in-cache Generate the module in cache<br/> --non-verbose-templates Generate non verbose templates<br/> --with-show Generate a show method<br/> --singular The singular name<br/> --plural The plural name<br/> --route-prefix The route prefix<br/> --with-doctrine-route Whether you will use a Doctrine route<br/> --env The environment (default: dev)<br/> --actions-base-class The base class for the actions (default: sfActions)<br/><br/>Description:<br/> The doctrine:generate-module task generates a Doctrine module:<br/> <br/> ./symfony doctrine:generate-module frontend article Article<br/> <br/> The task creates a %module% module in the %application% application<br/> for the model class %model%.<br/> <br/> You can also create an empty module that inherits its actions and templates from<br/> a runtime generated module in %sf_app_cache_dir%/modules/auto%module% by<br/> using the --generate-in-cache option:<br/> <br/> ./symfony doctrine:generate-module --generate-in-cache frontend article Article<br/> <br/> The generator can use a customized theme by using the --theme option:<br/> <br/> ./symfony doctrine:generate-module --theme="custom" frontend article Article<br/> <br/> This way, you can create your very own module generator with your own conventions.<br/> <br/> You can also change the default actions base class (default to sfActions) of<br/> the generated modules:<br/> <br/> ./symfony doctrine:generate-module --actions-base-class="ProjectActions" frontend article Article<br/>]]></help>
    <params>application module model</params>
  </command>
  <command>
    <name>doctrine:generate-module-for-route</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:generate-module-for-route [--theme="..."] [--non-verbose-templates] [--singular="..."] [--plural="..."] [--env="..."] [--actions-base-class="..."] application route<br/><br/>Arguments:<br/> application The application name<br/> route The route name<br/><br/>Options:<br/> --theme The theme name (default: default)<br/> --non-verbose-templates Generate non verbose templates<br/> --singular The singular name<br/> --plural The plural name<br/> --env The environment (default: dev)<br/> --actions-base-class The base class for the actions (default: sfActions)<br/><br/>Description:<br/> The doctrine:generate-module-for-route task generates a Doctrine module for a route definition:<br/> <br/> ./symfony doctrine:generate-module-for-route frontend article<br/> <br/> The task creates a module in the %frontend% application for the<br/> %article% route definition found in routing.yml.<br/>]]></help>
    <params>application route</params>
  </command>
  <command>
    <name>doctrine:insert-sql</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:insert-sql [--application[="..."]] [--env="..."] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The doctrine:insert-sql task creates database tables:<br/> <br/> ./symfony doctrine:insert-sql<br/> <br/> The task connects to the database and creates tables for all the<br/> lib/model/doctrine/*.class.php files.<br/>]]></help>
  </command>
  <command>
    <name>doctrine:migrate</name>
    <help><![CDATA[Usage:<br/> symfony doctrine:migrate [--application[="..."]] [--env="..."] [--up] [--down] [--dry-run] [version]<br/><br/>Arguments:<br/> version The version to migrate to<br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --up Migrate up one version<br/> --down Migrate down one version<br/> --dry-run Do not persist migrations<br/><br/>Description:<br/> The doctrine:migrate task migrates the database:<br/> <br/> ./symfony doctrine:migrate<br/> <br/> Provide a version argument to migrate to a specific version:<br/> <br/> ./symfony doctrine:migrate 10<br/> <br/> To migration up or down one migration, use the --up or --down options:<br/> <br/> ./symfony doctrine:migrate --down<br/> <br/> If your database supports rolling back DDL statements, you can run migrations<br/> in dry-run mode using the --dry-run option:<br/> <br/> ./symfony doctrine:migrate --dry-run<br/>]]></help>
    <params>version[=null]</params>
  </command>
  <command>
    <name>generate:app</name>
    <help><![CDATA[Usage:<br/> symfony generate:app [--escaping-strategy="..."] [--csrf-secret="..."] app<br/><br/>Arguments:<br/> app The application name<br/><br/>Options:<br/> --escaping-strategy Output escaping strategy (default: 1)<br/> --csrf-secret Secret to use for CSRF protection (default: 1)<br/><br/>Description:<br/> The generate:app task creates the basic directory structure<br/> for a new application in the current project:<br/> <br/> ./symfony generate:app frontend<br/> <br/> This task also creates two front controller scripts in the<br/> web/ directory:<br/> <br/> web/%application%.php for the production environment<br/> web/%application%_dev.php for the development environment<br/> <br/> For the first application, the production environment script is named<br/> index.php.<br/> <br/> If an application with the same name already exists,<br/> it throws a sfCommandException.<br/> <br/> By default, the output escaping is enabled (to prevent XSS), and a random<br/> secret is also generated to prevent CSRF.<br/> <br/> You can disable output escaping by using the escaping-strategy<br/> option:<br/> <br/> ./symfony generate:app frontend --escaping-strategy=false<br/> <br/> You can enable session token in forms (to prevent CSRF) by defining<br/> a secret with the csrf-secret option:<br/> <br/> ./symfony generate:app frontend --csrf-secret=UniqueSecret<br/> <br/> You can customize the default skeleton used by the task by creating a<br/> %sf_data_dir%/skeleton/app directory.<br/>]]></help>
    <params>app</params>
  </command>
  <command>
    <name>generate:module</name>
    <help><![CDATA[Usage:<br/> symfony generate:module application module<br/><br/>Arguments:<br/> application The application name<br/> module The module name<br/><br/>Description:<br/> The generate:module task creates the basic directory structure<br/> for a new module in an existing application:<br/> <br/> ./symfony generate:module frontend article<br/> <br/> The task can also change the author name found in the actions.class.php<br/> if you have configure it in config/properties.ini:<br/> <br/> [symfony]<br/> name=blog<br/> author=Fabien Potencier <fabien.potencier@sensio.com><br/> <br/> You can customize the default skeleton used by the task by creating a<br/> %sf_data_dir%/skeleton/module directory.<br/> <br/> The task also creates a functional test stub named<br/> %sf_test_dir%/functional/%application%/%module%ActionsTest.class.php<br/> that does not pass by default.<br/> <br/> If a module with the same name already exists in the application,<br/> it throws a sfCommandException.<br/>]]></help>
    <params>application module</params>
  </command>
  <command>
    <name>generate:project</name>
    <help><![CDATA[Usage:<br/> symfony generate:project [--orm="..."] [--installer="..."] name [author]<br/><br/>Arguments:<br/> name The project name<br/> author The project author (default: Your name here)<br/><br/>Options:<br/> --orm The ORM to use by default (default: Doctrine)<br/> --installer An installer script to execute<br/><br/>Description:<br/> The generate:project task creates the basic directory structure<br/> for a new project in the current directory:<br/> <br/> ./symfony generate:project blog<br/> <br/> If the current directory already contains a symfony project,<br/> it throws a sfCommandException.<br/> <br/> By default, the task configures Doctrine as the ORM. If you want to use<br/> Propel, use the --orm option:<br/> <br/> ./symfony generate:project blog --orm=Propel<br/> <br/> If you don't want to use an ORM, pass none to --orm option:<br/> <br/> ./symfony generate:project blog --orm=none<br/> <br/> You can also pass the --installer option to further customize the<br/> project:<br/> <br/> ./symfony generate:project blog --installer=./installer.php<br/> <br/> You can optionally include a second author argument to specify what name to<br/> use as author when symfony generates new classes:<br/> <br/> ./symfony generate:project blog "Jack Doe"<br/>]]></help>
    <params>name author[=null]</params>
  </command>
  <command>
    <name>generate:task</name>
    <help><![CDATA[Usage:<br/> symfony generate:task [--dir="..."] [--use-database="..."] [--brief-description="..."] task_name<br/><br/>Arguments:<br/> task_name The task name (can contain namespace)<br/><br/>Options:<br/> --dir The directory to create the task in (default: lib/task)<br/> --use-database Whether the task needs model initialization to access database (default: doctrine)<br/> --brief-description A brief task description (appears in task list)<br/><br/>Description:<br/> The generate:task creates a new sfTask class based on the name passed as<br/> argument:<br/> <br/> ./symfony generate:task namespace:name<br/> <br/> The namespaceNameTask.class.php skeleton task is created under the lib/task/<br/> directory. Note that the namespace is optional.<br/> <br/> If you want to create the file in another directory (relative to the project<br/> root folder), pass it in the --dir option. This directory will be created<br/> if it does not already exist.<br/> <br/> ./symfony generate:task namespace:name --dir=plugins/myPlugin/lib/task<br/> <br/> If you want the task to default to a connection other than doctrine, provide<br/> the name of this connection with the --use-database option:<br/> <br/> ./symfony generate:task namespace:name --use-database=main<br/> <br/> The --use-database option can also be used to disable database<br/> initialization in the generated task:<br/> <br/> ./symfony generate:task namespace:name --use-database=false<br/> <br/> You can also specify a description:<br/> <br/> ./symfony generate:task namespace:name --brief-description="Does interesting things"<br/>]]></help>
    <params>task_name</params>
  </command>
  <command>
    <name>i18n:extract</name>
    <help><![CDATA[Usage:<br/> symfony i18n:extract [--display-new] [--display-old] [--auto-save] [--auto-delete] application culture<br/><br/>Arguments:<br/> application The application name<br/> culture The target culture<br/><br/>Options:<br/> --display-new Output all new found strings<br/> --display-old Output all old strings<br/> --auto-save Save the new strings<br/> --auto-delete Delete old strings<br/><br/>Description:<br/> The i18n:extract task extracts i18n strings from your project files<br/> for the given application and target culture:<br/> <br/> ./symfony i18n:extract frontend fr<br/> <br/> By default, the task only displays the number of new and old strings<br/> it found in the current project.<br/> <br/> If you want to display the new strings, use the --display-new option:<br/> <br/> ./symfony i18n:extract --display-new frontend fr<br/> <br/> To save them in the i18n message catalogue, use the --auto-save option:<br/> <br/> ./symfony i18n:extract --auto-save frontend fr<br/> <br/> If you want to display strings that are present in the i18n messages<br/> catalogue but are not found in the application, use the <br/> --display-old option:<br/> <br/> ./symfony i18n:extract --display-old frontend fr<br/> <br/> To automatically delete old strings, use the --auto-delete but<br/> be careful, especially if you have translations for plugins as they will<br/> appear as old strings but they are not:<br/> <br/> ./symfony i18n:extract --auto-delete frontend fr<br/>]]></help>
    <params>application culture</params>
  </command>
  <command>
    <name>i18n:find</name>
    <help><![CDATA[Usage:<br/> symfony i18n:find [--env="..."] application<br/><br/>Arguments:<br/> application The application name<br/><br/>Options:<br/> --env The environment (default: dev)<br/><br/>Description:<br/> The i18n:find task finds non internationalized strings embedded in templates:<br/> <br/> ./symfony i18n:find frontend<br/> <br/> This task is able to find non internationalized strings in pure HTML and in PHP code:<br/> <br/> <p>Non i18n text</p><br/> <p><?php echo 'Test' ?></p><br/> <br/> As the task returns all strings embedded in PHP, you can have some false positive (especially<br/> if you use the string syntax for helper arguments).<br/>]]></help>
    <params>application</params>
  </command>
  <command>
    <name>log:clear</name>
    <help><![CDATA[Usage:<br/> symfony log:clear <br/><br/>Description:<br/> The log:clear task clears all symfony log files:<br/> <br/> ./symfony log:clear<br/>]]></help>
  </command>
  <command>
    <name>log:rotate</name>
    <help><![CDATA[Usage:<br/> symfony log:rotate [--history="..."] [--period="..."] application env<br/><br/>Arguments:<br/> application The application name<br/> env The environment name<br/><br/>Options:<br/> --history The maximum number of old log files to keep (default: 10)<br/> --period The period in days (default: 7)<br/><br/>Description:<br/> The log:rotate task rotates application log files for a given<br/> environment:<br/> <br/> ./symfony log:rotate frontend dev<br/> <br/> You can specify a period or a history option:<br/> <br/> ./symfony log:rotate frontend dev --history=10 --period=7<br/>]]></help>
    <params>application env</params>
  </command>
  <command>
    <name>plugin:add-channel</name>
    <help><![CDATA[Usage:<br/> symfony plugin:add-channel name<br/><br/>Arguments:<br/> name The channel name<br/><br/>Description:<br/> The plugin:add-channel task adds a new PEAR channel:<br/> <br/> ./symfony plugin:add-channel symfony.plugins.pear.example.com<br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>plugin:install</name>
    <help><![CDATA[Usage:<br/> symfony plugin:install [-s|--stability="..."] [-r|--release="..."] [-c|--channel="..."] [-d|--install_deps] [--force-license] name<br/><br/>Arguments:<br/> name The plugin name<br/><br/>Options:<br/> --stability (-s) The preferred stability (stable, beta, alpha)<br/> --release (-r) The preferred version<br/> --channel (-c) The PEAR channel name<br/> --install_deps (-d) Whether to force installation of required dependencies<br/> --force-license Whether to force installation even if the license is not MIT like<br/><br/>Description:<br/> The plugin:install task installs a plugin:<br/> <br/> ./symfony plugin:install sfGuardPlugin<br/> <br/> By default, it installs the latest stable release.<br/> <br/> If you want to install a plugin that is not stable yet,<br/> use the stability option:<br/> <br/> ./symfony plugin:install --stability=beta sfGuardPlugin<br/> ./symfony plugin:install -s beta sfGuardPlugin<br/> <br/> You can also force the installation of a specific version:<br/> <br/> ./symfony plugin:install --release=1.0.0 sfGuardPlugin<br/> ./symfony plugin:install -r 1.0.0 sfGuardPlugin<br/> <br/> To force installation of all required dependencies, use the install_deps flag:<br/> <br/> ./symfony plugin:install --install-deps sfGuardPlugin<br/> ./symfony plugin:install -d sfGuardPlugin<br/> <br/> By default, the PEAR channel used is symfony-plugins<br/> (plugins.symfony-project.org).<br/> <br/> You can specify another channel with the channel option:<br/> <br/> ./symfony plugin:install --channel=mypearchannel sfGuardPlugin<br/> ./symfony plugin:install -c mypearchannel sfGuardPlugin<br/> <br/> You can also install PEAR packages hosted on a website:<br/> <br/> ./symfony plugin:install http://somewhere.example.com/sfGuardPlugin-1.0.0.tgz<br/> <br/> Or local PEAR packages:<br/> <br/> ./symfony plugin:install /home/fabien/plugins/sfGuardPlugin-1.0.0.tgz<br/> <br/> If the plugin contains some web content (images, stylesheets or javascripts),<br/> the task creates a %name% symbolic link for those assets under web/.<br/> On Windows, the task copy all the files to the web/%name% directory.<br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>plugin:list</name>
    <help><![CDATA[Usage:<br/> symfony plugin:list <br/><br/>Description:<br/> The plugin:list task lists all installed plugins:<br/> <br/> ./symfony plugin:list<br/> <br/> It also gives the channel and version for each plugin.<br/>]]></help>
  </command>
  <command>
    <name>plugin:publish-assets</name>
    <help><![CDATA[Usage:<br/> symfony plugin:publish-assets [--core-only] [plugins1] ... [pluginsN]<br/><br/>Arguments:<br/> plugins Publish this plugin's assets<br/><br/>Options:<br/> --core-only If set only core plugins will publish their assets<br/><br/>Description:<br/> The plugin:publish-assets task will publish web assets from all plugins.<br/> <br/> ./symfony plugin:publish-assets<br/> <br/> In fact this will send the plugin.post_install event to each plugin.<br/> <br/> You can specify which plugin or plugins should install their assets by passing<br/> those plugins' names as arguments:<br/> <br/> ./symfony plugin:publish-assets sfDoctrinePlugin<br/>]]></help>
    <params>plugins</params>
  </command>
  <command>
    <name>plugin:uninstall</name>
    <help><![CDATA[Usage:<br/> symfony plugin:uninstall [-c|--channel="..."] [-d|--install_deps] name<br/><br/>Arguments:<br/> name The plugin name<br/><br/>Options:<br/> --channel (-c) The PEAR channel name<br/> --install_deps (-d) Whether to force installation of dependencies<br/><br/>Description:<br/> The plugin:uninstall task uninstalls a plugin:<br/> <br/> ./symfony plugin:uninstall sfGuardPlugin<br/> <br/> The default channel is symfony.<br/> <br/> You can also uninstall a plugin which has a different channel:<br/> <br/> ./symfony plugin:uninstall --channel=mypearchannel sfGuardPlugin<br/> <br/> ./symfony plugin:uninstall -c mypearchannel sfGuardPlugin<br/> <br/> Or you can use the channel/package notation:<br/> <br/> ./symfony plugin:uninstall mypearchannel/sfGuardPlugin<br/> <br/> You can get the PEAR channel name of a plugin by launching the<br/> plugin:list] task.<br/> <br/> If the plugin contains some web content (images, stylesheets or javascripts),<br/> the task also removes the [web/%name% symbolic link (on *nix)<br/> or directory (on Windows).<br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>plugin:upgrade</name>
    <help><![CDATA[Usage:<br/> symfony plugin:upgrade [-s|--stability="..."] [-r|--release="..."] [-c|--channel="..."] name<br/><br/>Arguments:<br/> name The plugin name<br/><br/>Options:<br/> --stability (-s) The preferred stability (stable, beta, alpha)<br/> --release (-r) The preferred version<br/> --channel (-c) The PEAR channel name<br/><br/>Description:<br/> The plugin:upgrade task tries to upgrade a plugin:<br/> <br/> ./symfony plugin:upgrade sfGuardPlugin<br/> <br/> The default channel is symfony.<br/> <br/> If the plugin contains some web content (images, stylesheets or javascripts),<br/> the task also updates the web/%name% directory content on Windows.<br/> <br/> See plugin:install for more information about the format of the plugin name and options.<br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>project:clear-controllers</name>
    <help><![CDATA[Usage:<br/> symfony project:clear-controllers <br/><br/>Description:<br/> The project:clear-controllers task clears all non production environment<br/> controllers:<br/> <br/> ./symfony project:clear-controllers<br/> <br/> You can use this task on a production server to remove all front<br/> controller scripts except the production ones.<br/> <br/> If you have two applications named frontend and backend,<br/> you have four default controller scripts in web/:<br/> <br/> index.php<br/> frontend_dev.php<br/> backend.php<br/> backend_dev.php<br/> <br/> After executing the project:clear-controllers task, two front<br/> controller scripts are left in web/:<br/> <br/> index.php<br/> backend.php<br/> <br/> Those two controllers are safe because debug mode and the web debug<br/> toolbar are disabled.<br/>]]></help>
  </command>
  <command>
    <name>project:deploy</name>
    <help><![CDATA[Usage:<br/> symfony project:deploy [--go] [--rsync-dir="..."] [--rsync-options[="..."]] server<br/><br/>Arguments:<br/> server The server name<br/><br/>Options:<br/> --go Do the deployment<br/> --rsync-dir The directory where to look for rsync*.txt files (default: config)<br/> --rsync-options To options to pass to the rsync executable (default: -azC --force --delete --progress)<br/><br/>Description:<br/> The project:deploy task deploys a project on a server:<br/> <br/> ./symfony project:deploy production<br/> <br/> The server must be configured in config/properties.ini:<br/> <br/> [production]<br/> host=www.example.com<br/> port=22<br/> user=fabien<br/> dir=/var/www/sfblog/<br/> type=rsync<br/> <br/> To automate the deployment, the task uses rsync over SSH.<br/> You must configure SSH access with a key or configure the password<br/> in config/properties.ini.<br/> <br/> By default, the task is in dry-mode. To do a real deployment, you<br/> must pass the --go option:<br/> <br/> ./symfony project:deploy --go production<br/> <br/> Files and directories configured in config/rsync_exclude.txt are<br/> not deployed:<br/> <br/> .svn<br/> /web/uploads/*<br/> /cache/*<br/> /log/*<br/> <br/> You can also create a rsync.txt and rsync_include.txt files.<br/> <br/> If you need to customize the rsync*.txt files based on the server,<br/> you can pass a rsync-dir option:<br/> <br/> ./symfony project:deploy --go --rsync-dir=config/production production<br/> <br/> Last, you can specify the options passed to the rsync executable, using the<br/> rsync-options option (defaults are -azC --force --delete --progress):<br/> <br/> ./symfony project:deploy --go --rsync-options=-avz<br/>]]></help>
    <params>server</params>
  </command>
  <command>
    <name>project:disable</name>
    <help><![CDATA[Usage:<br/> symfony project:disable env [app1] ... [appN]<br/><br/>Arguments:<br/> env The environment name<br/> app The application name<br/><br/>Description:<br/> The project:disable task disables an environment:<br/> <br/> ./symfony project:disable prod<br/> <br/> You can also specify individual applications to be disabled in that<br/> environment:<br/> <br/> ./symfony project:disable prod frontend backend<br/>]]></help>
    <params>env app</params>
  </command>
  <command>
    <name>project:enable</name>
    <help><![CDATA[Usage:<br/> symfony project:enable env [app1] ... [appN]<br/><br/>Arguments:<br/> env The environment name<br/> app The application name<br/><br/>Description:<br/> The project:enable task enables a specific environment:<br/> <br/> ./symfony project:enable frontend prod<br/> <br/> You can also specify individual applications to be enabled in that<br/> environment:<br/> <br/> ./symfony project:enable prod frontend backend<br/>]]></help>
    <params>env app</params>
  </command>
  <command>
    <name>project:optimize</name>
    <help><![CDATA[Usage:<br/> symfony project:optimize application [env]<br/><br/>Arguments:<br/> application The application name<br/> env The environment name (default: prod)<br/><br/>Description:<br/> The project:optimize optimizes a project for better performance:<br/> <br/> ./symfony project:optimize frontend prod<br/> <br/> This task should only be used on a production server. Don't forget to re-run<br/> the task each time the project changes.<br/>]]></help>
    <params>application env[=null]</params>
  </command>
  <command>
    <name>project:permissions</name>
    <help><![CDATA[Usage:<br/> symfony project:permissions <br/><br/>Description:<br/> The project:permissions task fixes directory permissions:<br/> <br/> ./symfony project:permissions<br/>]]></help>
  </command>
  <command>
    <name>project:send-emails</name>
    <help><![CDATA[Usage:<br/> symfony project:send-emails [--application[="..."]] [--env="..."] [--message-limit[="..."]] [--time-limit[="..."]] <br/><br/>Options:<br/> --application The application name (default: 1)<br/> --env The environment (default: dev)<br/> --message-limit The maximum number of messages to send (default: 0)<br/> --time-limit The time limit for sending messages (in seconds) (default: 0)<br/><br/>Description:<br/> The project:send-emails sends emails stored in a queue:<br/> <br/> php symfony project:send-emails<br/> <br/> You can limit the number of messages to send:<br/> <br/> php symfony project:send-emails --message-limit=10<br/> <br/> Or limit to time (in seconds):<br/> <br/> php symfony project:send-emails --time-limit=10<br/>]]></help>
  </command>
  <command>
    <name>project:validate</name>
    <help><![CDATA[Usage:<br/> symfony project:validate <br/><br/>Description:<br/> The project:validate task detects deprecated usage in your project.<br/> <br/> ./symfony project:validate<br/> <br/> The task lists all the files you need to change before switching to<br/> symfony 1.4.<br/>]]></help>
  </command>
  <command>
    <name>symfony:test</name>
    <help><![CDATA[Usage:<br/> symfony symfony:test [-u|--update-autoloader] [-f|--only-failed] [--xml="..."] [--rebuild-all] <br/><br/>Options:<br/> --update-autoloader (-u) Update the sfCoreAutoload class<br/> --only-failed (-f) Only run tests that failed last time<br/> --xml The file name for the JUnit compatible XML log file<br/> --rebuild-all Rebuild all generated fixture files<br/><br/>Description:<br/> The test:all task launches the symfony test suite:<br/> <br/> ./symfony symfony:test<br/>]]></help>
  </command>
  <command>
    <name>test:all</name>
    <help><![CDATA[Usage:<br/> symfony test:all [-f|--only-failed] [--xml="..."] <br/><br/>Options:<br/> --only-failed (-f) Only run tests that failed last time<br/> --xml The file name for the JUnit compatible XML log file<br/><br/>Description:<br/> The test:all task launches all unit and functional tests:<br/> <br/> ./symfony test:all<br/> <br/> The task launches all tests found in test/.<br/> <br/> If some tests fail, you can use the --trace option to have more<br/> information about the failures:<br/> <br/> ./symfony test:all -t<br/> <br/> Or you can also try to fix the problem by launching them by hand or with the<br/> test:unit and test:functional task.<br/> <br/> Use the --only-failed option to force the task to only execute tests<br/> that failed during the previous run:<br/> <br/> ./symfony test:all --only-failed<br/> <br/> Here is how it works: the first time, all tests are run as usual. But for<br/> subsequent test runs, only tests that failed last time are executed. As you<br/> fix your code, some tests will pass, and will be removed from subsequent runs.<br/> When all tests pass again, the full test suite is run... you can then rinse<br/> and repeat.<br/> <br/> The task can output a JUnit compatible XML log file with the --xml<br/> options:<br/> <br/> ./symfony test:all --xml=log.xml<br/>]]></help>
  </command>
  <command>
    <name>test:coverage</name>
    <help><![CDATA[Usage:<br/> symfony test:coverage [--detailed] test_name lib_name<br/><br/>Arguments:<br/> test_name A test file name or a test directory<br/> lib_name A lib file name or a lib directory for wich you want to know the coverage<br/><br/>Options:<br/> --detailed Output detailed information<br/><br/>Description:<br/> The test:coverage task outputs the code coverage<br/> given a test file or test directory<br/> and a lib file or lib directory for which you want code<br/> coverage:<br/> <br/> ./symfony test:coverage test/unit/model lib/model<br/> <br/> To output the lines not covered, pass the --detailed option:<br/> <br/> ./symfony test:coverage --detailed test/unit/model lib/model<br/>]]></help>
    <params>test_name lib_name</params>
  </command>
  <command>
    <name>test:functional</name>
    <help><![CDATA[Usage:<br/> symfony test:functional [--xml="..."] application [controller1] ... [controllerN]<br/><br/>Arguments:<br/> application The application name<br/> controller The controller name<br/><br/>Options:<br/> --xml The file name for the JUnit compatible XML log file<br/><br/>Description:<br/> The test:functional task launches functional tests for a<br/> given application:<br/> <br/> ./symfony test:functional frontend<br/> <br/> The task launches all tests found in test/functional/%application%.<br/> <br/> If some tests fail, you can use the --trace option to have more<br/> information about the failures:<br/> <br/> ./symfony test:functional frontend -t<br/> <br/> You can launch all functional tests for a specific controller by<br/> giving a controller name:<br/> <br/> ./symfony test:functional frontend article<br/> <br/> You can also launch all functional tests for several controllers:<br/> <br/> ./symfony test:functional frontend article comment<br/> <br/> The task can output a JUnit compatible XML log file with the --xml<br/> options:<br/> <br/> ./symfony test:functional --xml=log.xml<br/>]]></help>
    <params>application controller</params>
  </command>
  <command>
    <name>test:unit</name>
    <help><![CDATA[Usage:<br/> symfony test:unit [--xml="..."] [name1] ... [nameN]<br/><br/>Arguments:<br/> name The test name<br/><br/>Options:<br/> --xml The file name for the JUnit compatible XML log file<br/><br/>Description:<br/> The test:unit task launches unit tests:<br/> <br/> ./symfony test:unit<br/> <br/> The task launches all tests found in test/unit.<br/> <br/> If some tests fail, you can use the --trace option to have more<br/> information about the failures:<br/> <br/> ./symfony test:unit -t<br/> <br/> You can launch unit tests for a specific name:<br/> <br/> ./symfony test:unit strtolower<br/> <br/> You can also launch unit tests for several names:<br/> <br/> ./symfony test:unit strtolower strtoupper<br/> <br/> The task can output a JUnit compatible XML log file with the --xml<br/> options:<br/> <br/> ./symfony test:unit --xml=log.xml<br/>]]></help>
    <params>name</params>
  </command>
  <help><![CDATA[Usage:<br/> symfony [options] task_name [arguments]<br/><br/>Options:<br/> --help -H Display this help message.<br/> --quiet -q Do not log messages to standard output.<br/> --trace -t Turn on invoke/execute tracing, enable full backtrace.<br/> --version -V Display the program version.<br/> --color Forces ANSI color output.<br/> --xml To output help as XML<br/><br/>Available tasks:<br/> :help Displays help for a task<br/> :list Lists tasks<br/>app<br/> :routes Displays current routes for an application<br/>cache<br/> :clear Clears the cache (cc)<br/>configure<br/> :author Configure project author<br/> :database Configure database DSN<br/>doctrine<br/> :build Generate code based on your schema<br/> :build-db Creates database for current model (doctrine:create-db)<br/> :build-filters Creates filter form classes for the current model<br/> :build-forms Creates form classes for the current model<br/> :build-model Creates classes for the current model<br/> :build-schema Creates a schema from an existing database<br/> :build-sql Creates SQL for the current model<br/> :clean-model-files Delete all generated model classes for models which no longer exist in your YAML schema (doctrine:clean)<br/> :create-model-tables Drop and recreate tables for specified models.<br/> :data-dump Dumps data to the fixtures directory<br/> :data-load Loads YAML fixture data<br/> :delete-model-files Delete all the related auto generated files for a given model name.<br/> :dql Execute a DQL query and view the results<br/> :drop-db Drops database for current model<br/> :generate-admin Generates a Doctrine admin module<br/> :generate-migration Generate migration class<br/> :generate-migrations-db Generate migration classes from existing database connections<br/> :generate-migrations-diff Generate migration classes by producing a diff between your old and new schema.<br/> :generate-migrations-models Generate migration classes from an existing set of models<br/> :generate-module Generates a Doctrine module<br/> :generate-module-for-route Generates a Doctrine module for a route definition<br/> :insert-sql Inserts SQL for current model<br/> :migrate Migrates database to current/specified version<br/>generate<br/> :app Generates a new application<br/> :module Generates a new module<br/> :project Generates a new project<br/> :task Creates a skeleton class for a new task<br/>i18n<br/> :extract Extracts i18n strings from php files<br/> :find Finds non "i18n ready" strings in an application<br/>log<br/> :clear Clears log files<br/> :rotate Rotates an application's log files<br/>plugin<br/> :add-channel Add a new PEAR channel<br/> :install Installs a plugin<br/> :list Lists installed plugins<br/> :publish-assets Publishes web assets for all plugins<br/> :uninstall Uninstalls a plugin<br/> :upgrade Upgrades a plugin<br/>project<br/> :clear-controllers Clears all non production environment controllers<br/> :deploy Deploys a project to another server<br/> :disable Disables an application in a given environment<br/> :enable Enables an application in a given environment<br/> :optimize Optimizes a project for better performance<br/> :permissions Fixes symfony directory permissions<br/> :send-emails Sends emails stored in a queue<br/> :validate Finds deprecated usage in a project<br/>symfony<br/> :test Launches the symfony test suite<br/>test<br/> :all Launches all tests<br/> :coverage Outputs test code coverage<br/> :functional Launches functional tests<br/> :unit Launches unit tests<br/>]]></help>
</framework>

